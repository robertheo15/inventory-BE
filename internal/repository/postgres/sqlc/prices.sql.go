// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: prices.sql

package sqlc

import (
	"context"
	"time"
)

const createPrice = `-- name: CreatePrice :one
INSERT INTO prices (id, eceran, grosir, created_at, updated_at, created_by, updated_by)
VALUES (gen_random_uuid(), $1::float, $2::float, now() at time zone 'Asia/Jakarta',
        now() at time zone 'Asia/Jakarta', $3::varchar, $4::varchar) RETURNING id::char(36)
`

type CreatePriceParams struct {
	Eceran    float64 `json:"eceran"`
	Grosir    float64 `json:"grosir"`
	CreatedBy string  `json:"created_by"`
	UpdatedBy string  `json:"updated_by"`
}

func (q *Queries) CreatePrice(ctx context.Context, arg CreatePriceParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createPrice,
		arg.Eceran,
		arg.Grosir,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const deletePriceByID = `-- name: DeletePriceByID :one
DELETE
FROM prices
WHERE id = $1::char(36)
    RETURNING id
`

func (q *Queries) DeletePriceByID(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRowContext(ctx, deletePriceByID, id)
	err := row.Scan(&id)
	return id, err
}

const getPrice = `-- name: GetPrice :one
SELECT id::char(36),
        eceran::float(36),
        grosir::float(36),
        created_at::timestamp,
        updated_at::timestamp,
        created_by::varchar,
        updated_by::varchar
FROM prices limit 1
`

type GetPriceRow struct {
	ID        string    `json:"id"`
	Eceran    float64   `json:"eceran"`
	Grosir    float64   `json:"grosir"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	CreatedBy string    `json:"created_by"`
	UpdatedBy string    `json:"updated_by"`
}

func (q *Queries) GetPrice(ctx context.Context) (GetPriceRow, error) {
	row := q.db.QueryRowContext(ctx, getPrice)
	var i GetPriceRow
	err := row.Scan(
		&i.ID,
		&i.Eceran,
		&i.Grosir,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const updatePriceByID = `-- name: UpdatePriceByID :one
UPDATE product_variants
SET eceran = $1::float,
    grosir = $2::float,
    updated_at = (now() at time zone 'Asia/Jakarta')::timestamp,
    updated_by = $3::varchar
WHERE id = $4::char(36) returning id::char(36)
`

type UpdatePriceByIDParams struct {
	Eceran    float64 `json:"eceran"`
	Grosir    float64 `json:"grosir"`
	UpdatedBy string  `json:"updated_by"`
	ID        string  `json:"id"`
}

func (q *Queries) UpdatePriceByID(ctx context.Context, arg UpdatePriceByIDParams) (string, error) {
	row := q.db.QueryRowContext(ctx, updatePriceByID,
		arg.Eceran,
		arg.Grosir,
		arg.UpdatedBy,
		arg.ID,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}
