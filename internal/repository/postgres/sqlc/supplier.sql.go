// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: supplier.sql

package sqlc

import (
	"context"
	"time"
)

const createSupplier = `-- name: CreateSupplier :one
INSERT INTO suppliers (id,
                       brand_name,
                       phone_number,
                       address,
                       email,
                       created_at,
                       updated_at,
                       created_by,
                       updated_by)
VALUES (gen_random_uuid(),
        $1::varchar,
        $2::varchar,
        $3::varchar,
        $4::varchar,
        (now() at time zone 'Asia/Jakarta')::timestamp,
        (now() at time zone 'Asia/Jakarta')::timestamp,
        $5::varchar,
        $6::varchar) RETURNING id::char(36)
`

type CreateSupplierParams struct {
	BrandName   string `json:"brand_name"`
	PhoneNumber string `json:"phone_number"`
	Address     string `json:"address"`
	Email       string `json:"email"`
	CreatedBy   string `json:"created_by"`
	UpdatedBy   string `json:"updated_by"`
}

func (q *Queries) CreateSupplier(ctx context.Context, arg CreateSupplierParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createSupplier,
		arg.BrandName,
		arg.PhoneNumber,
		arg.Address,
		arg.Email,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const deleteSupplierByID = `-- name: DeleteSupplierByID :one
DELETE
FROM suppliers
WHERE id = $1::char(36) returning id::char(36)
`

func (q *Queries) DeleteSupplierByID(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRowContext(ctx, deleteSupplierByID, id)
	err := row.Scan(&id)
	return id, err
}

const getSupplierByID = `-- name: GetSupplierByID :one
SELECT id::char(36),
        brand_name::varchar,
        phone_number::varchar,
        address::varchar,
        email::varchar,
        created_at::timestamp,
        updated_at::timestamp,
        created_by::varchar,
        updated_by::varchar
FROM suppliers
WHERE id = $1::char(36)
`

type GetSupplierByIDRow struct {
	ID          string    `json:"id"`
	BrandName   string    `json:"brand_name"`
	PhoneNumber string    `json:"phone_number"`
	Address     string    `json:"address"`
	Email       string    `json:"email"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
	CreatedBy   string    `json:"created_by"`
	UpdatedBy   string    `json:"updated_by"`
}

func (q *Queries) GetSupplierByID(ctx context.Context, id string) (GetSupplierByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getSupplierByID, id)
	var i GetSupplierByIDRow
	err := row.Scan(
		&i.ID,
		&i.BrandName,
		&i.PhoneNumber,
		&i.Address,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const getSuppliers = `-- name: GetSuppliers :many
SELECT id::char(36),
       brand_name::varchar,
       phone_number::varchar,
       address::varchar,
       email::varchar,
       created_at::timestamp,
       updated_at::timestamp,
       created_by::varchar,
       updated_by::varchar
FROM suppliers
`

type GetSuppliersRow struct {
	ID          string    `json:"id"`
	BrandName   string    `json:"brand_name"`
	PhoneNumber string    `json:"phone_number"`
	Address     string    `json:"address"`
	Email       string    `json:"email"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
	CreatedBy   string    `json:"created_by"`
	UpdatedBy   string    `json:"updated_by"`
}

func (q *Queries) GetSuppliers(ctx context.Context) ([]GetSuppliersRow, error) {
	rows, err := q.db.QueryContext(ctx, getSuppliers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetSuppliersRow
	for rows.Next() {
		var i GetSuppliersRow
		if err := rows.Scan(
			&i.ID,
			&i.BrandName,
			&i.PhoneNumber,
			&i.Address,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateSupplierByID = `-- name: UpdateSupplierByID :one
UPDATE suppliers
SET brand_name = $1::varchar,
    phone_number = $2::varchar,
    address = $3::varchar,
    email = $4::varchar,
    updated_at= now()::timestamp,
    created_by= $5::varchar,
    updated_by= $6::varchar
WHERE id = $7::char(36) RETURNING
    id::char(36),
    brand_name::varchar,
    phone_number::varchar,
    address::varchar,
    email::varchar,
    created_at::timestamp,
    updated_at::timestamp,
    created_by::varchar,
    updated_by::varchar
`

type UpdateSupplierByIDParams struct {
	BrandName   string `json:"brand_name"`
	PhoneNumber string `json:"phone_number"`
	Address     string `json:"address"`
	Email       string `json:"email"`
	CreatedBy   string `json:"created_by"`
	UpdatedBy   string `json:"updated_by"`
	ID          string `json:"id"`
}

type UpdateSupplierByIDRow struct {
	ID          string    `json:"id"`
	BrandName   string    `json:"brand_name"`
	PhoneNumber string    `json:"phone_number"`
	Address     string    `json:"address"`
	Email       string    `json:"email"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
	CreatedBy   string    `json:"created_by"`
	UpdatedBy   string    `json:"updated_by"`
}

func (q *Queries) UpdateSupplierByID(ctx context.Context, arg UpdateSupplierByIDParams) (UpdateSupplierByIDRow, error) {
	row := q.db.QueryRowContext(ctx, updateSupplierByID,
		arg.BrandName,
		arg.PhoneNumber,
		arg.Address,
		arg.Email,
		arg.CreatedBy,
		arg.UpdatedBy,
		arg.ID,
	)
	var i UpdateSupplierByIDRow
	err := row.Scan(
		&i.ID,
		&i.BrandName,
		&i.PhoneNumber,
		&i.Address,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}
