// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: transaction_detail.sql

package sqlc

import (
	"context"
	"time"
)

const createTransactionDetail = `-- name: CreateTransactionDetail :one
INSERT INTO transaction_details (id, t_id, p_id, pv_id, price, qty, created_at, updated_at, created_by, updated_by)
VALUES (gen_random_uuid(),
        $1::char(36),
        $2::char(36),
        $3::char(36),
        $4::float,
        $5::integer,
        now() at time zone 'Asia/Jakarta',
        now() at time zone 'Asia/Jakarta',
        $6::varchar,
        $7::varchar) RETURNING id::char(36)
`

type CreateTransactionDetailParams struct {
	TID       string  `json:"t_id"`
	PID       string  `json:"p_id"`
	PvID      string  `json:"pv_id"`
	Price     float64 `json:"price"`
	Qty       int32   `json:"qty"`
	CreatedBy string  `json:"created_by"`
	UpdatedBy string  `json:"updated_by"`
}

func (q *Queries) CreateTransactionDetail(ctx context.Context, arg CreateTransactionDetailParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createTransactionDetail,
		arg.TID,
		arg.PID,
		arg.PvID,
		arg.Price,
		arg.Qty,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const deleteTransactionDetailByID = `-- name: DeleteTransactionDetailByID :one
DELETE
FROM transaction_details
WHERE id = $1::char(36)
RETURNING id::char(36)
`

func (q *Queries) DeleteTransactionDetailByID(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRowContext(ctx, deleteTransactionDetailByID, id)
	err := row.Scan(&id)
	return id, err
}

const getTransactionDetailByID = `-- name: GetTransactionDetailByID :one
SELECT  id::char(36),
        t_id::char(36),
        p_id::char(36),
        pv_id::char(36),
        price::float,
        qty::integer,
        created_at::timestamp,
        updated_at::timestamp,
        created_by::varchar,
        updated_by::varchar
FROM transaction_details
WHERE id = $1::char(36)
`

type GetTransactionDetailByIDRow struct {
	ID        string    `json:"id"`
	TID       string    `json:"t_id"`
	PID       string    `json:"p_id"`
	PvID      string    `json:"pv_id"`
	Price     float64   `json:"price"`
	Qty       int32     `json:"qty"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	CreatedBy string    `json:"created_by"`
	UpdatedBy string    `json:"updated_by"`
}

func (q *Queries) GetTransactionDetailByID(ctx context.Context, id string) (GetTransactionDetailByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getTransactionDetailByID, id)
	var i GetTransactionDetailByIDRow
	err := row.Scan(
		&i.ID,
		&i.TID,
		&i.PID,
		&i.PvID,
		&i.Price,
		&i.Qty,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const getTransactionDetailByTID = `-- name: GetTransactionDetailByTID :many
SELECT  id::char(36),
        t_id::char(36),
        p_id::char(36),
        pv_id::char(36),
        price::float,
        qty::integer,
        created_at::timestamp,
        updated_at::timestamp,
        created_by::varchar,
        updated_by::varchar
FROM transaction_details
WHERE t_id = $1::char(36)
`

type GetTransactionDetailByTIDRow struct {
	ID        string    `json:"id"`
	TID       string    `json:"t_id"`
	PID       string    `json:"p_id"`
	PvID      string    `json:"pv_id"`
	Price     float64   `json:"price"`
	Qty       int32     `json:"qty"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	CreatedBy string    `json:"created_by"`
	UpdatedBy string    `json:"updated_by"`
}

func (q *Queries) GetTransactionDetailByTID(ctx context.Context, tID string) ([]GetTransactionDetailByTIDRow, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionDetailByTID, tID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTransactionDetailByTIDRow
	for rows.Next() {
		var i GetTransactionDetailByTIDRow
		if err := rows.Scan(
			&i.ID,
			&i.TID,
			&i.PID,
			&i.PvID,
			&i.Price,
			&i.Qty,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getTransactionDetails = `-- name: GetTransactionDetails :many
SELECT  id::char(36),
        t_id::char(36),
        p_id::char(36),
        pv_id::char(36),
        price::float,
        qty::integer,
        created_at::timestamp,
        updated_at::timestamp,
        created_by::varchar,
        updated_by::varchar
FROM transaction_details
`

type GetTransactionDetailsRow struct {
	ID        string    `json:"id"`
	TID       string    `json:"t_id"`
	PID       string    `json:"p_id"`
	PvID      string    `json:"pv_id"`
	Price     float64   `json:"price"`
	Qty       int32     `json:"qty"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	CreatedBy string    `json:"created_by"`
	UpdatedBy string    `json:"updated_by"`
}

func (q *Queries) GetTransactionDetails(ctx context.Context) ([]GetTransactionDetailsRow, error) {
	rows, err := q.db.QueryContext(ctx, getTransactionDetails)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetTransactionDetailsRow
	for rows.Next() {
		var i GetTransactionDetailsRow
		if err := rows.Scan(
			&i.ID,
			&i.TID,
			&i.PID,
			&i.PvID,
			&i.Price,
			&i.Qty,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateTransactionDetailByID = `-- name: UpdateTransactionDetailByID :one
UPDATE transaction_details
SET t_id = $1::char(36),
    p_id = $1::char(36),
    pv_id= $2::char(36),
    price = $3::float,
    qty = $4::integer,
    updated_at = now() at time zone 'Asia/Jakarta',
    updated_by = $5::varchar
WHERE id = $6::char(36)
    RETURNING id::char(36),
    t_id::char(36),
    p_id::char(36),
    pv_id::char(36),
    price::float,
    qty::integer,
    created_at::timestamp,
    updated_at::timestamp,
    created_by::varchar,
    updated_by::varchar
`

type UpdateTransactionDetailByIDParams struct {
	TID       string  `json:"t_id"`
	PvID      string  `json:"pv_id"`
	Price     float64 `json:"price"`
	Qty       int32   `json:"qty"`
	UpdatedBy string  `json:"updated_by"`
	ID        string  `json:"id"`
}

type UpdateTransactionDetailByIDRow struct {
	ID        string    `json:"id"`
	TID       string    `json:"t_id"`
	PID       string    `json:"p_id"`
	PvID      string    `json:"pv_id"`
	Price     float64   `json:"price"`
	Qty       int32     `json:"qty"`
	CreatedAt time.Time `json:"created_at"`
	UpdatedAt time.Time `json:"updated_at"`
	CreatedBy string    `json:"created_by"`
	UpdatedBy string    `json:"updated_by"`
}

func (q *Queries) UpdateTransactionDetailByID(ctx context.Context, arg UpdateTransactionDetailByIDParams) (UpdateTransactionDetailByIDRow, error) {
	row := q.db.QueryRowContext(ctx, updateTransactionDetailByID,
		arg.TID,
		arg.PvID,
		arg.Price,
		arg.Qty,
		arg.UpdatedBy,
		arg.ID,
	)
	var i UpdateTransactionDetailByIDRow
	err := row.Scan(
		&i.ID,
		&i.TID,
		&i.PID,
		&i.PvID,
		&i.Price,
		&i.Qty,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}
