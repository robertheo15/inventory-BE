// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: user.sql

package sqlc

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO public.users (id, full_name, password, phone_number, email, role, active,
                          created_at, updated_at, created_by,
                          updated_by)
VALUES ((gen_random_uuid()):: char (36), $1::varchar, $2::varchar, $3::varchar,
        $4::varchar,
        $5::integer,
        $6::boolean, (now() at time zone 'Asia/Jakarta'):: timestamp,
        (now() at time zone 'Asia/Jakarta'):: timestamp, $7::varchar,
        $8::varchar) RETURNING id, full_name, password, phone_number, email, role, active, created_at, updated_at, created_by, updated_by
`

type CreateUserParams struct {
	FullName    string `json:"full_name"`
	Password    string `json:"password"`
	PhoneNumber string `json:"phone_number"`
	Email       string `json:"email"`
	Role        int32  `json:"role"`
	Active      bool   `json:"active"`
	CreatedBy   string `json:"created_by"`
	UpdatedBy   string `json:"updated_by"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FullName,
		arg.Password,
		arg.PhoneNumber,
		arg.Email,
		arg.Role,
		arg.Active,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Password,
		&i.PhoneNumber,
		&i.Email,
		&i.Role,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const deleteUserByID = `-- name: DeleteUserByID :one
DELETE
FROM users
WHERE id = $1::char(36) returning id
`

func (q *Queries) DeleteUserByID(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRowContext(ctx, deleteUserByID, id)
	err := row.Scan(&id)
	return id, err
}

const getUserByID = `-- name: GetUserByID :one
select id, full_name, password, phone_number, email, role, active, created_at, updated_at, created_by, updated_by
from users
where id = $1::varchar
`

func (q *Queries) GetUserByID(ctx context.Context, id string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Password,
		&i.PhoneNumber,
		&i.Email,
		&i.Role,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const updateUserByID = `-- name: UpdateUserByID :one
UPDATE users
SET full_name = $1::varchar,
        password = $2::varchar,
        phone_number = $3::varchar,
        email = $4::varchar,
        role = $5::integer,
        active = $6::boolean,
        updated_at = (now() at time zone 'Asia/Jakarta'):: timestamp,
        updated_by = $7::varchar
WHERE id = $8::char(36) returning id
`

type UpdateUserByIDParams struct {
	FullName    string `json:"full_name"`
	Password    string `json:"password"`
	PhoneNumber string `json:"phone_number"`
	Email       string `json:"email"`
	Role        int32  `json:"role"`
	Active      bool   `json:"active"`
	UpdatedBy   string `json:"updated_by"`
	ID          string `json:"id"`
}

func (q *Queries) UpdateUserByID(ctx context.Context, arg UpdateUserByIDParams) (string, error) {
	row := q.db.QueryRowContext(ctx, updateUserByID,
		arg.FullName,
		arg.Password,
		arg.PhoneNumber,
		arg.Email,
		arg.Role,
		arg.Active,
		arg.UpdatedBy,
		arg.ID,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}
