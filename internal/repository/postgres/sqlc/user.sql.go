// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: user.sql

package sqlc

import (
	"context"
	"time"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users (id, full_name, password, phone_number, email, role, active,
                          created_at, updated_at, created_by,
                          updated_by)
VALUES ((gen_random_uuid()):: char (36), $1::varchar, $2::varchar, $3::varchar,
        $4::varchar,
        $5::integer,
        $6::integer, (now() at time zone 'Asia/Jakarta'):: timestamp,
        (now() at time zone 'Asia/Jakarta'):: timestamp, $7::varchar,
        $8::varchar) RETURNING id::char(36)
`

type CreateUserParams struct {
	FullName    string `json:"full_name"`
	Password    string `json:"password"`
	PhoneNumber string `json:"phone_number"`
	Email       string `json:"email"`
	Role        int32  `json:"role"`
	Active      int32  `json:"active"`
	CreatedBy   string `json:"created_by"`
	UpdatedBy   string `json:"updated_by"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FullName,
		arg.Password,
		arg.PhoneNumber,
		arg.Email,
		arg.Role,
		arg.Active,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const deleteUserByID = `-- name: DeleteUserByID :one
DELETE
FROM users
WHERE id = $1::char(36) returning id
`

func (q *Queries) DeleteUserByID(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRowContext(ctx, deleteUserByID, id)
	err := row.Scan(&id)
	return id, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id::char(36), full_name::varchar, password::varchar,phone_number::varchar, email::varchar, role::integer, active::integer, created_at::timestamp, updated_at::timestamp, created_by::varchar, updated_by::varchar
FROM users
WHERE email = $1::varchar
`

type GetUserByEmailRow struct {
	ID          string    `json:"id"`
	FullName    string    `json:"full_name"`
	Password    string    `json:"password"`
	PhoneNumber string    `json:"phone_number"`
	Email       string    `json:"email"`
	Role        int32     `json:"role"`
	Active      int32     `json:"active"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
	CreatedBy   string    `json:"created_by"`
	UpdatedBy   string    `json:"updated_by"`
}

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (GetUserByEmailRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i GetUserByEmailRow
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Password,
		&i.PhoneNumber,
		&i.Email,
		&i.Role,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id::char(36), full_name::varchar, password::varchar, phone_number::varchar, email::varchar, role::integer, active::integer, created_at::timestamp, updated_at::timestamp, created_by::varchar, updated_by::varchar
FROM users
WHERE id = $1::char(36)
`

type GetUserByIDRow struct {
	ID          string    `json:"id"`
	FullName    string    `json:"full_name"`
	Password    string    `json:"password"`
	PhoneNumber string    `json:"phone_number"`
	Email       string    `json:"email"`
	Role        int32     `json:"role"`
	Active      int32     `json:"active"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
	CreatedBy   string    `json:"created_by"`
	UpdatedBy   string    `json:"updated_by"`
}

func (q *Queries) GetUserByID(ctx context.Context, id string) (GetUserByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i GetUserByIDRow
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.Password,
		&i.PhoneNumber,
		&i.Email,
		&i.Role,
		&i.Active,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const updateUserByID = `-- name: UpdateUserByID :one
UPDATE users
SET full_name = $1::varchar,
        phone_number = $2::varchar,
        email = $3::varchar,
        role = $4::integer,
        active = $5::integer,
        updated_at = (now() at time zone 'Asia/Jakarta'):: timestamp,
        created_by = $6::varchar,
        updated_by = $7::varchar
WHERE id = $8:: char (36) returning id
`

type UpdateUserByIDParams struct {
	FullName    string `json:"full_name"`
	PhoneNumber string `json:"phone_number"`
	Email       string `json:"email"`
	Role        int32  `json:"role"`
	Active      int32  `json:"active"`
	CreatedBy   string `json:"created_by"`
	UpdatedBy   string `json:"updated_by"`
	ID          string `json:"id"`
}

func (q *Queries) UpdateUserByID(ctx context.Context, arg UpdateUserByIDParams) (string, error) {
	row := q.db.QueryRowContext(ctx, updateUserByID,
		arg.FullName,
		arg.PhoneNumber,
		arg.Email,
		arg.Role,
		arg.Active,
		arg.CreatedBy,
		arg.UpdatedBy,
		arg.ID,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const updateUserPasswordByID = `-- name: UpdateUserPasswordByID :one
UPDATE users
SET     password = $1::varchar,
        updated_at = (now() at time zone 'Asia/Jakarta'):: timestamp,
        created_by = $2::varchar,
        updated_by = $3::varchar
WHERE id = $4:: char (36) returning id::char(36), created_at::timestamp
`

type UpdateUserPasswordByIDParams struct {
	Password  string `json:"password"`
	CreatedBy string `json:"created_by"`
	UpdatedBy string `json:"updated_by"`
	ID        string `json:"id"`
}

type UpdateUserPasswordByIDRow struct {
	ID        string    `json:"id"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) UpdateUserPasswordByID(ctx context.Context, arg UpdateUserPasswordByIDParams) (UpdateUserPasswordByIDRow, error) {
	row := q.db.QueryRowContext(ctx, updateUserPasswordByID,
		arg.Password,
		arg.CreatedBy,
		arg.UpdatedBy,
		arg.ID,
	)
	var i UpdateUserPasswordByIDRow
	err := row.Scan(&i.ID, &i.CreatedAt)
	return i, err
}
