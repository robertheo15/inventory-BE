// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.18.0
// source: customer.sql

package sqlc

import (
	"context"
	"time"
)

const createCustomer = `-- name: CreateCustomer :one
INSERT INTO customers (id, full_name, phone_number, address, created_at, updated_at, created_by,
                       updated_by)
VALUES (gen_random_uuid(),
        $1::varchar,
        $2::varchar,
        $3::varchar,
        now() at time zone 'Asia/Jakarta',
        now() at time zone 'Asia/Jakarta',
        $4::varchar,
        $5::varchar) RETURNING id::char(36)
`

type CreateCustomerParams struct {
	FullName    string `json:"full_name"`
	PhoneNumber string `json:"phone_number"`
	Address     string `json:"address"`
	CreatedBy   string `json:"created_by"`
	UpdatedBy   string `json:"updated_by"`
}

func (q *Queries) CreateCustomer(ctx context.Context, arg CreateCustomerParams) (string, error) {
	row := q.db.QueryRowContext(ctx, createCustomer,
		arg.FullName,
		arg.PhoneNumber,
		arg.Address,
		arg.CreatedBy,
		arg.UpdatedBy,
	)
	var id string
	err := row.Scan(&id)
	return id, err
}

const deleteCustomerByID = `-- name: DeleteCustomerByID :one
DELETE
FROM customers
WHERE id = $1::varchar(36) returning id::varchar(36)
`

func (q *Queries) DeleteCustomerByID(ctx context.Context, id string) (string, error) {
	row := q.db.QueryRowContext(ctx, deleteCustomerByID, id)
	err := row.Scan(&id)
	return id, err
}

const getCustomers = `-- name: GetCustomers :many
SELECT  id::char(36),
        full_name::varchar,
        phone_number::varchar,
        address::varchar,
        email::varchar,
        created_at::timestamp,
        updated_at::timestamp,
        created_by::varchar,
        updated_by::varchar
FROM customers
`

type GetCustomersRow struct {
	ID          string    `json:"id"`
	FullName    string    `json:"full_name"`
	PhoneNumber string    `json:"phone_number"`
	Address     string    `json:"address"`
	Email       string    `json:"email"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
	CreatedBy   string    `json:"created_by"`
	UpdatedBy   string    `json:"updated_by"`
}

func (q *Queries) GetCustomers(ctx context.Context) ([]GetCustomersRow, error) {
	rows, err := q.db.QueryContext(ctx, getCustomers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GetCustomersRow
	for rows.Next() {
		var i GetCustomersRow
		if err := rows.Scan(
			&i.ID,
			&i.FullName,
			&i.PhoneNumber,
			&i.Address,
			&i.Email,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.CreatedBy,
			&i.UpdatedBy,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCustomersByID = `-- name: GetCustomersByID :one
SELECT  id::char(36),
        full_name::varchar,
        phone_number::varchar,
        address::varchar,
        email::varchar,
        created_at::timestamp,
        updated_at::timestamp,
        created_by::varchar,
        updated_by::varchar
FROM customers WHERE id= $1::char(36)
`

type GetCustomersByIDRow struct {
	ID          string    `json:"id"`
	FullName    string    `json:"full_name"`
	PhoneNumber string    `json:"phone_number"`
	Address     string    `json:"address"`
	Email       string    `json:"email"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
	CreatedBy   string    `json:"created_by"`
	UpdatedBy   string    `json:"updated_by"`
}

func (q *Queries) GetCustomersByID(ctx context.Context, id string) (GetCustomersByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getCustomersByID, id)
	var i GetCustomersByIDRow
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.PhoneNumber,
		&i.Address,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}

const updateCustomerByID = `-- name: UpdateCustomerByID :one
UPDATE customers
SET full_name = $1::varchar,
    phone_number = $2::varchar,
    address = $3::varchar,
    email = $4::varchar,
    created_at = $5::timestamp,
    updated_at = (now() at time zone 'Asia/Jakarta')::timestamp,
    updated_by = $6::varchar
WHERE   id = $7::char(36) RETURNING
    id::char(36),
    full_name::varchar,
    phone_number::varchar,
    address::varchar,
    email::varchar,
    created_at::timestamp,
    updated_at::timestamp,
    created_by::varchar,
    updated_by::varchar
`

type UpdateCustomerByIDParams struct {
	FullName    string    `json:"full_name"`
	PhoneNumber string    `json:"phone_number"`
	Address     string    `json:"address"`
	Email       string    `json:"email"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedBy   string    `json:"updated_by"`
	ID          string    `json:"id"`
}

type UpdateCustomerByIDRow struct {
	ID          string    `json:"id"`
	FullName    string    `json:"full_name"`
	PhoneNumber string    `json:"phone_number"`
	Address     string    `json:"address"`
	Email       string    `json:"email"`
	CreatedAt   time.Time `json:"created_at"`
	UpdatedAt   time.Time `json:"updated_at"`
	CreatedBy   string    `json:"created_by"`
	UpdatedBy   string    `json:"updated_by"`
}

func (q *Queries) UpdateCustomerByID(ctx context.Context, arg UpdateCustomerByIDParams) (UpdateCustomerByIDRow, error) {
	row := q.db.QueryRowContext(ctx, updateCustomerByID,
		arg.FullName,
		arg.PhoneNumber,
		arg.Address,
		arg.Email,
		arg.CreatedAt,
		arg.UpdatedBy,
		arg.ID,
	)
	var i UpdateCustomerByIDRow
	err := row.Scan(
		&i.ID,
		&i.FullName,
		&i.PhoneNumber,
		&i.Address,
		&i.Email,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.CreatedBy,
		&i.UpdatedBy,
	)
	return i, err
}
